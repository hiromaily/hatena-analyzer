// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package sqlcgen

import (
	"context"
)

// iteratorForInsertURLs implements pgx.CopyFromSource.
type iteratorForInsertURLs struct {
	rows                 []string
	skippedFirstNextCall bool
}

func (r *iteratorForInsertURLs) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertURLs) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForInsertURLs) Err() error {
	return nil
}

// INSERT INTO
//
//	URLs (url_address)
//
// VALUES
//
//	($1)
//
// ON CONFLICT (url_address) DO NOTHING
// RETURNING
//
//	url_id;
//
// @desc: insert urls if not existed
func (q *Queries) InsertURLs(ctx context.Context, urlAddress []string) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"urls"}, []string{"url_address"}, &iteratorForInsertURLs{rows: urlAddress})
}
