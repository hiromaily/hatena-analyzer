// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bulkInsertUrls = `-- name: BulkInsertUrls :exec
CALL bulk_insert_urls($1, $2, $3)
`

type BulkInsertUrlsParams struct {
	BulkInsertUrls   interface{}
	BulkInsertUrls_2 interface{}
	BulkInsertUrls_3 interface{}
}

// @desc: insert urls by stored procedure. conflicts must be ignored. arg1: array of urls, arg2: array of category, arg3: array of isAll flag.
func (q *Queries) BulkInsertUrls(ctx context.Context, arg BulkInsertUrlsParams) error {
	_, err := q.db.Exec(ctx, bulkInsertUrls, arg.BulkInsertUrls, arg.BulkInsertUrls_2, arg.BulkInsertUrls_3)
	return err
}

const countGetBookmarkedUsersURLCounts = `-- name: CountGetBookmarkedUsersURLCounts :one
SELECT
  COUNT(*)
FROM
  (
    SELECT
      user_id,
      COUNT(user_id) AS url_count
    FROM
      UserURLs
    WHERE
      url_id IN (1, 2, 3, 4)
    GROUP BY
      user_id
    HAVING
      COUNT(user_id) = 4
  ) AS subquery
`

// @desc: Not used. Count target that each user's bookmarked urls
func (q *Queries) CountGetBookmarkedUsersURLCounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countGetBookmarkedUsersURLCounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllURLs = `-- name: GetAllURLs :many
SELECT DISTINCT ON (u.url_address)
  u.url_id, u.url_address, u.category_code, u.title, u.bookmark_count, u.named_user_count, u.private_user_rate
FROM
  URLs u
WHERE
  u.is_deleted = FALSE
ORDER BY
  u.url_address, u.url_id
`

type GetAllURLsRow struct {
	UrlID           int32
	UrlAddress      string
	CategoryCode    pgtype.Text
	Title           pgtype.Text
	BookmarkCount   pgtype.Int4
	NamedUserCount  pgtype.Int4
	PrivateUserRate pgtype.Float8
}

// @desc: get all url addresses
func (q *Queries) GetAllURLs(ctx context.Context) ([]GetAllURLsRow, error) {
	rows, err := q.db.Query(ctx, getAllURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllURLsRow
	for rows.Next() {
		var i GetAllURLsRow
		if err := rows.Scan(
			&i.UrlID,
			&i.UrlAddress,
			&i.CategoryCode,
			&i.Title,
			&i.BookmarkCount,
			&i.NamedUserCount,
			&i.PrivateUserRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAveragePrivateUserRates = `-- name: GetAveragePrivateUserRates :many
SELECT
  category_code, AVG(private_user_rate) AS average_private_user_rate
FROM 
  URLs
WHERE 
  is_deleted = FALSE
GROUP BY 
  category_code
`

type GetAveragePrivateUserRatesRow struct {
	CategoryCode           pgtype.Text
	AveragePrivateUserRate float64
}

// @desc: get average private user rates on all categories
func (q *Queries) GetAveragePrivateUserRates(ctx context.Context) ([]GetAveragePrivateUserRatesRow, error) {
	rows, err := q.db.Query(ctx, getAveragePrivateUserRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAveragePrivateUserRatesRow
	for rows.Next() {
		var i GetAveragePrivateUserRatesRow
		if err := rows.Scan(&i.CategoryCode, &i.AveragePrivateUserRate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookmarkedUsersURLCounts = `-- name: GetBookmarkedUsersURLCounts :many
SELECT 
    user_id, COUNT(user_id) AS url_count
FROM 
    UserURLs
WHERE
    url_id in (1,2,3,4)
GROUP BY 
    user_id
ORDER BY 
    url_count DESC
`

type GetBookmarkedUsersURLCountsRow struct {
	UserID   int32
	UrlCount int64
}

// @desc: Not used. Count each user's bookmarked urls
func (q *Queries) GetBookmarkedUsersURLCounts(ctx context.Context) ([]GetBookmarkedUsersURLCountsRow, error) {
	rows, err := q.db.Query(ctx, getBookmarkedUsersURLCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookmarkedUsersURLCountsRow
	for rows.Next() {
		var i GetBookmarkedUsersURLCountsRow
		if err := rows.Scan(&i.UserID, &i.UrlCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLsByPrivateRate = `-- name: GetURLsByPrivateRate :many
SELECT
  u.url_id, u.url_address, u.category_code, u.title, u.bookmark_count, u.named_user_count, u.private_user_rate
FROM 
  URLs u
WHERE 
  private_user_rate >= $1 
ORDER BY 
  private_user_rate DESC
`

type GetURLsByPrivateRateRow struct {
	UrlID           int32
	UrlAddress      string
	CategoryCode    pgtype.Text
	Title           pgtype.Text
	BookmarkCount   pgtype.Int4
	NamedUserCount  pgtype.Int4
	PrivateUserRate pgtype.Float8
}

// @desc: get urls by private_user_rate
func (q *Queries) GetURLsByPrivateRate(ctx context.Context, privateUserRate pgtype.Float8) ([]GetURLsByPrivateRateRow, error) {
	rows, err := q.db.Query(ctx, getURLsByPrivateRate, privateUserRate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetURLsByPrivateRateRow
	for rows.Next() {
		var i GetURLsByPrivateRateRow
		if err := rows.Scan(
			&i.UrlID,
			&i.UrlAddress,
			&i.CategoryCode,
			&i.Title,
			&i.BookmarkCount,
			&i.NamedUserCount,
			&i.PrivateUserRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLsByURLAddresses = `-- name: GetURLsByURLAddresses :many
SELECT DISTINCT ON (u.url_address)
  u.url_id, u.url_address, u.category_code, u.title, u.bookmark_count, u.named_user_count, u.private_user_rate
FROM
  URLs u
WHERE
  u.is_deleted = FALSE
AND
  u.url_address = ANY($1::text[])
ORDER BY
  u.url_address, u.url_id
`

type GetURLsByURLAddressesRow struct {
	UrlID           int32
	UrlAddress      string
	CategoryCode    pgtype.Text
	Title           pgtype.Text
	BookmarkCount   pgtype.Int4
	NamedUserCount  pgtype.Int4
	PrivateUserRate pgtype.Float8
}

// @desc: get url information by url address
func (q *Queries) GetURLsByURLAddresses(ctx context.Context, dollar_1 []string) ([]GetURLsByURLAddressesRow, error) {
	rows, err := q.db.Query(ctx, getURLsByURLAddresses, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetURLsByURLAddressesRow
	for rows.Next() {
		var i GetURLsByURLAddressesRow
		if err := rows.Scan(
			&i.UrlID,
			&i.UrlAddress,
			&i.CategoryCode,
			&i.Title,
			&i.BookmarkCount,
			&i.NamedUserCount,
			&i.PrivateUserRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrlID = `-- name: GetUrlID :one
SELECT
  u.url_id
FROM
  URLs u
WHERE
  u.url_address = $1
`

// @desc: get target url_id by url address
func (q *Queries) GetUrlID(ctx context.Context, urlAddress string) (int32, error) {
	row := q.db.QueryRow(ctx, getUrlID, urlAddress)
	var url_id int32
	err := row.Scan(&url_id)
	return url_id, err
}

const getUserNames = `-- name: GetUserNames :many
SELECT
  u.user_name
FROM
  Users u
WHERE
  u.is_deleted = FALSE
`

// @desc: get users
func (q *Queries) GetUserNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_name string
		if err := rows.Scan(&user_name); err != nil {
			return nil, err
		}
		items = append(items, user_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserNamesByURL = `-- name: GetUserNamesByURL :many
SELECT
  u.user_name
FROM
  Users u
  INNER JOIN UserURLs uu ON u.user_id = uu.user_id
  INNER JOIN URLs url ON uu.url_id = url.url_id
WHERE
  u.is_deleted = FALSE
  AND url.is_deleted = FALSE
  AND uu.is_deleted = FALSE
  AND url.url_address = $1
`

// @desc: get target users by url
func (q *Queries) GetUserNamesByURL(ctx context.Context, urlAddress string) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserNamesByURL, urlAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_name string
		if err := rows.Scan(&user_name); err != nil {
			return nil, err
		}
		items = append(items, user_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserNamesByURLs = `-- name: GetUserNamesByURLs :many
SELECT
  u.user_name
FROM
  Users u
  INNER JOIN UserURLs uu ON u.user_id = uu.user_id
  INNER JOIN URLs url ON uu.url_id = url.url_id
WHERE
  u.is_deleted = FALSE
  AND url.is_deleted = FALSE
  AND uu.is_deleted = FALSE
  AND url.url_address = ANY($1::text[])
`

// @desc: get target users by multiple urls
func (q *Queries) GetUserNamesByURLs(ctx context.Context, dollar_1 []string) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserNamesByURLs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_name string
		if err := rows.Scan(&user_name); err != nil {
			return nil, err
		}
		items = append(items, user_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByURL = `-- name: GetUsersByURL :many
SELECT
  u.user_name, u.bookmark_count
FROM
  Users u
  INNER JOIN UserURLs uu ON u.user_id = uu.user_id
  INNER JOIN URLs url ON uu.url_id = url.url_id
WHERE
  u.is_deleted = FALSE
  AND url.is_deleted = FALSE
  AND uu.is_deleted = FALSE
  AND url.url_address = $1
ORDER BY
  u.bookmark_count DESC
`

type GetUsersByURLRow struct {
	UserName      string
	BookmarkCount pgtype.Int4
}

// @desc: get target users by url
func (q *Queries) GetUsersByURL(ctx context.Context, urlAddress string) ([]GetUsersByURLRow, error) {
	rows, err := q.db.Query(ctx, getUsersByURL, urlAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByURLRow
	for rows.Next() {
		var i GetUsersByURLRow
		if err := rows.Scan(&i.UserName, &i.BookmarkCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertURL = `-- name: InsertURL :one
WITH insert_result AS (
	INSERT INTO URLs (url_address, category_code)
	VALUES ($1, $2)
	ON CONFLICT (url_address, category_code) DO NOTHING
	RETURNING url_id
)
SELECT url_id FROM insert_result
UNION ALL
SELECT url_id FROM URLs WHERE url_address = $1 AND category_code = $2 LIMIT 1
`

type InsertURLParams struct {
	UrlAddress   string
	CategoryCode pgtype.Text
}

// @desc: Deprecated. insert url if not existed and return url_id
func (q *Queries) InsertURL(ctx context.Context, arg InsertURLParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertURL, arg.UrlAddress, arg.CategoryCode)
	var url_id int32
	err := row.Scan(&url_id)
	return url_id, err
}

type InsertURLsParams struct {
	UrlAddress   string
	CategoryCode pgtype.Text
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
  Users (user_name)
VALUES
  ($1)
ON CONFLICT (user_name) DO NOTHING
RETURNING
  user_id
`

// @desc: Deprecated!!! insert user if not existed and return user_id
func (q *Queries) InsertUser(ctx context.Context, userName string) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, userName)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const updateURL = `-- name: UpdateURL :execrows
UPDATE URLs
SET
    title = $1,
    bookmark_count = $2,
    named_user_count = $3,
    private_user_rate = $4
WHERE
    url_id = $5
`

type UpdateURLParams struct {
	Title           pgtype.Text
	BookmarkCount   pgtype.Int4
	NamedUserCount  pgtype.Int4
	PrivateUserRate pgtype.Float8
	UrlID           int32
}

// @desc: update url with bookmark_count, named_user_count, private_user_rate
func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateURL,
		arg.Title,
		arg.BookmarkCount,
		arg.NamedUserCount,
		arg.PrivateUserRate,
		arg.UrlID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserBookmarkCount = `-- name: UpdateUserBookmarkCount :one
UPDATE Users
  SET bookmark_count = $1, updated_at = CURRENT_TIMESTAMP
WHERE user_name = $2 
RETURNING
  user_id
`

type UpdateUserBookmarkCountParams struct {
	BookmarkCount pgtype.Int4
	UserName      string
}

// @desc: update user bookmark count and return url_id
func (q *Queries) UpdateUserBookmarkCount(ctx context.Context, arg UpdateUserBookmarkCountParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserBookmarkCount, arg.BookmarkCount, arg.UserName)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const upsertURL = `-- name: UpsertURL :one
INSERT INTO URLs (url_address, title, bookmark_count, named_user_count, private_user_rate) 
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (url_address) 
DO UPDATE SET
    bookmark_count = $3,
    named_user_count = $4,
    private_user_rate = $5,
    is_deleted = FALSE,
    updated_at = EXCLUDED.updated_at 
RETURNING url_id
`

type UpsertURLParams struct {
	UrlAddress      string
	Title           pgtype.Text
	BookmarkCount   pgtype.Int4
	NamedUserCount  pgtype.Int4
	PrivateUserRate pgtype.Float8
}

// @desc: insert url if not existed, update url with is_deleted=false if existed
func (q *Queries) UpsertURL(ctx context.Context, arg UpsertURLParams) (int32, error) {
	row := q.db.QueryRow(ctx, upsertURL,
		arg.UrlAddress,
		arg.Title,
		arg.BookmarkCount,
		arg.NamedUserCount,
		arg.PrivateUserRate,
	)
	var url_id int32
	err := row.Scan(&url_id)
	return url_id, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO Users (user_name) 
VALUES ($1)
ON CONFLICT (user_name) 
DO UPDATE SET 
    is_deleted = FALSE,
    updated_at = EXCLUDED.updated_at 
RETURNING user_id
`

// @desc: insert user if not existed, update user with is_deleted=false if existed
func (q *Queries) UpsertUser(ctx context.Context, userName string) (int32, error) {
	row := q.db.QueryRow(ctx, upsertUser, userName)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const upsertUserURLs = `-- name: UpsertUserURLs :exec
INSERT INTO UserURLs (user_id, url_id) 
VALUES ($1, $2)
ON CONFLICT (user_id, url_id) 
DO UPDATE SET 
    is_deleted = FALSE,
    updated_at = EXCLUDED.updated_at
`

type UpsertUserURLsParams struct {
	UserID int32
	UrlID  int32
}

// @desc: insert UserURLs if not existed, update UserURLs with is_deleted=false if existed
func (q *Queries) UpsertUserURLs(ctx context.Context, arg UpsertUserURLsParams) error {
	_, err := q.db.Exec(ctx, upsertUserURLs, arg.UserID, arg.UrlID)
	return err
}
