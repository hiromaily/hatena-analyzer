// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlcgen

import (
	"context"
)

const countGetBookmarkedUsersURLCounts = `-- name: CountGetBookmarkedUsersURLCounts :one
SELECT
  COUNT(*)
FROM
  (
    SELECT
      user_id,
      COUNT(user_id) AS url_count
    FROM
      UserURLs
    WHERE
      url_id IN (1, 2, 3, 4)
    GROUP BY
      user_id
    HAVING
      COUNT(user_id) = 4
  ) AS subquery
`

// @desc: Count target that each user's bookmarked urls
func (q *Queries) CountGetBookmarkedUsersURLCounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countGetBookmarkedUsersURLCounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBookmarkedUsersURLCounts = `-- name: GetBookmarkedUsersURLCounts :many
SELECT 
    user_id, COUNT(user_id) AS url_count
FROM 
    UserURLs
WHERE
    url_id in (1,2,3,4)
GROUP BY 
    user_id
ORDER BY 
    url_count DESC
`

type GetBookmarkedUsersURLCountsRow struct {
	UserID   int32
	UrlCount int64
}

// @desc: Count each user's bookmarked urls
func (q *Queries) GetBookmarkedUsersURLCounts(ctx context.Context) ([]GetBookmarkedUsersURLCountsRow, error) {
	rows, err := q.db.Query(ctx, getBookmarkedUsersURLCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookmarkedUsersURLCountsRow
	for rows.Next() {
		var i GetBookmarkedUsersURLCountsRow
		if err := rows.Scan(&i.UserID, &i.UrlCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrlID = `-- name: GetUrlID :one
SELECT
  u.url_id
FROM
  URLs u
WHERE
  u.url_address = $1
`

// @desc: get target url_id by url address
func (q *Queries) GetUrlID(ctx context.Context, urlAddress string) (int32, error) {
	row := q.db.QueryRow(ctx, getUrlID, urlAddress)
	var url_id int32
	err := row.Scan(&url_id)
	return url_id, err
}

const getUsersByURL = `-- name: GetUsersByURL :many
SELECT
  u.user_id, u.user_name, u.is_deleted, u.created_at, u.updated_at
FROM
  Users u
  INNER JOIN UserURLs uu ON u.user_id = uu.user_id
  INNER JOIN URLs url ON uu.url_id = url.url_id
WHERE
  url.url_address = $1
`

// @desc: get target users by url
func (q *Queries) GetUsersByURL(ctx context.Context, urlAddress string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByURL, urlAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertURL = `-- name: InsertURL :one
INSERT INTO
  URLs (url_address)
VALUES
  ($1)
ON CONFLICT (url_address) DO NOTHING
RETURNING
  url_id
`

// @desc: insert url if not existed and return url_id
func (q *Queries) InsertURL(ctx context.Context, urlAddress string) (int32, error) {
	row := q.db.QueryRow(ctx, insertURL, urlAddress)
	var url_id int32
	err := row.Scan(&url_id)
	return url_id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
  Users (user_name)
VALUES
  ($1)
ON CONFLICT (user_name) DO NOTHING
RETURNING
  user_id
`

// @desc: Deprecated!!! insert user if not existed and return user_id
func (q *Queries) InsertUser(ctx context.Context, userName string) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, userName)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO Users (user_name) 
VALUES ($1)
ON CONFLICT (user_name) 
DO UPDATE SET 
    is_deleted = FALSE,
    updated_at = EXCLUDED.updated_at 
RETURNING user_id
`

// @desc: insert user if not existed, update user with is_deleted=false if existed
func (q *Queries) UpsertUser(ctx context.Context, userName string) (int32, error) {
	row := q.db.QueryRow(ctx, upsertUser, userName)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const upsertUserURLs = `-- name: UpsertUserURLs :exec
INSERT INTO UserURLs (user_id, url_id) 
VALUES ($1, $2)
ON CONFLICT (user_id, url_id) 
DO UPDATE SET 
    is_deleted = FALSE,
    updated_at = EXCLUDED.updated_at
`

type UpsertUserURLsParams struct {
	UserID int32
	UrlID  int32
}

// @desc: insert UserURLs if not existed, update UserURLs with is_deleted=false if existed
func (q *Queries) UpsertUserURLs(ctx context.Context, arg UpsertUserURLsParams) error {
	_, err := q.db.Exec(ctx, upsertUserURLs, arg.UserID, arg.UrlID)
	return err
}
