// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlcgen

import (
	"context"
)

const getUsersByURL = `-- name: GetUsersByURL :many
SELECT
  u.user_id, u.user_name, u.is_deleted, u.created_at, u.updated_at
FROM
  Users u
  INNER JOIN UserURLs uu ON u.user_id = uu.user_id
  INNER JOIN URLs url ON uu.url_id = url.url_id
WHERE
  url.url_address = $1
`

// @desc: get target users by url
func (q *Queries) GetUsersByURL(ctx context.Context, urlAddress string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByURL, urlAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertURL = `-- name: InsertURL :exec
INSERT INTO
  URLs (url_address)
VALUES
  ($1)
ON CONFLICT (url_address) DO NOTHING
RETURNING
  url_id
`

// @desc: insert url if not existed and return url_id
func (q *Queries) InsertURL(ctx context.Context, urlAddress string) error {
	_, err := q.db.Exec(ctx, insertURL, urlAddress)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO
  Users (user_name)
VALUES
  ($1)
ON CONFLICT (user_name) DO NOTHING
RETURNING
  user_id
`

// @desc: insert user if not existed and return user_id
func (q *Queries) InsertUser(ctx context.Context, userName string) error {
	_, err := q.db.Exec(ctx, insertUser, userName)
	return err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO Users (user_name) 
VALUES ($1)
ON CONFLICT (user_name) 
DO UPDATE SET 
    is_deleted = FALSE,
    updated_at = EXCLUDED.updated_at
`

// @desc: insert user if not existed, update user with is_deleted=false if existed
func (q *Queries) UpsertUser(ctx context.Context, userName string) error {
	_, err := q.db.Exec(ctx, upsertUser, userName)
	return err
}
